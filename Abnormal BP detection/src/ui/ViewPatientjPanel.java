

package ui;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Patient;
import model.PatientDirectory;
import model.VitalSign;
import model.VitalSigns;

/**
 *
 * @author Vini
 */

public class ViewPatientjPanel extends javax.swing.JPanel {
    
    PatientDirectory patients;
    VitalSigns vitalSignsHistory;
    int currentSelectedRow;
   

    
    public ViewPatientjPanel(PatientDirectory patients, VitalSigns vitalSignsHistory) {
        initComponents();
        this.patients = patients;
        this.vitalSignsHistory = vitalSignsHistory;        
        currentSelectedRow = 0;
        populateCmbCommunity();
        
        populatePatientTable(new ArrayList<>(patients.getPatients()));
     
          }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCreate = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDisplayPatient = new javax.swing.JTable();
        lblBloodPressure = new javax.swing.JLabel();
        txtMedicalRecordNo = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        lblCity = new javax.swing.JLabel();
        txtCommunity = new javax.swing.JTextField();
        lblCommunity = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblMedicalRecordNo = new javax.swing.JLabel();
        lblAge = new javax.swing.JLabel();
        txtBloodPressure = new javax.swing.JTextField();
        txtAge = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        lblName1 = new javax.swing.JLabel();
        lblAge1 = new javax.swing.JLabel();
        btnApplyFilter = new javax.swing.JButton();
        lblAbnormalPatientCount = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        cmbxCommunity = new javax.swing.JComboBox<>();
        lblName2 = new javax.swing.JLabel();
        lblAddress = new javax.swing.JLabel();
        lblGender = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        txtGender = new javax.swing.JTextField();
        cmbAge = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(255, 204, 204));

        lblCreate.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblCreate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCreate.setText("Patient's Directory");

        tblDisplayPatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Medical Record No", "Age", "Address", "City", "Community", "Gender", "BP MIN"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDisplayPatient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDisplayPatientMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDisplayPatient);

        lblBloodPressure.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblBloodPressure.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblBloodPressure.setText("Blood Pressure:");

        txtMedicalRecordNo.setAutoscrolls(false);
        txtMedicalRecordNo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtMedicalRecordNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMedicalRecordNoFocusLost(evt);
            }
        });

        txtCity.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCityActionPerformed(evt);
            }
        });

        lblCity.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblCity.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblCity.setText("City:");

        txtCommunity.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtCommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCommunityActionPerformed(evt);
            }
        });

        lblCommunity.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblCommunity.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblCommunity.setText("Community:");

        lblName.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblName.setText("Name:");

        txtName.setAutoscrolls(false);
        txtName.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblMedicalRecordNo.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblMedicalRecordNo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblMedicalRecordNo.setText("Medical Record No:");

        lblAge.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblAge.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblAge.setText("Age:");

        txtBloodPressure.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtBloodPressure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBloodPressureActionPerformed(evt);
            }
        });

        txtAge.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAgeActionPerformed(evt);
            }
        });

        lblName1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblName1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblName1.setText("Select Community:");

        lblAge1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblAge1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblAge1.setText("Select Age Group:");

        btnApplyFilter.setText("Apply Filters");
        btnApplyFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyFilterActionPerformed(evt);
            }
        });

        lblAbnormalPatientCount.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        lblAbnormalPatientCount.setForeground(new java.awt.Color(51, 51, 51));
        lblAbnormalPatientCount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAbnormalPatientCount.setText("0");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Count of Abnormal Blood Pressure in a specified community:");

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        cmbxCommunity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Community" }));

        lblName2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblName2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblName2.setText("Total Abnormal Patients");

        lblAddress.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblAddress.setText("Address:");

        lblGender.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblGender.setText("Gender:");

        cmbAge.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Below 18", "18 to 45", "Above 45", "" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCreate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(btnApplyFilter)
                                        .addGap(117, 117, 117))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblName1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(cmbxCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblAge1)
                                                .addGap(18, 18, 18)
                                                .addComponent(cmbAge, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addGap(34, 34, 34)))
                                .addComponent(jLabel2)
                                .addGap(49, 49, 49)
                                .addComponent(lblAbnormalPatientCount, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblName)
                                    .addComponent(lblMedicalRecordNo)
                                    .addComponent(lblAge))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                                        .addComponent(txtMedicalRecordNo))
                                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblCity)
                                        .addGap(60, 60, 60)
                                        .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(lblCommunity)
                                        .addGap(20, 20, 20)
                                        .addComponent(txtCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(btnUpdate)
                                            .addComponent(lblBloodPressure))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtBloodPressure)))
                                .addGap(77, 77, 77)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblAddress)
                                    .addComponent(lblGender))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtAddress)
                                    .addComponent(txtGender, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1)
                .addGap(25, 25, 25))
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblName2)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 821, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(163, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblMedicalRecordNo)
                            .addComponent(txtMedicalRecordNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAge)
                            .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBloodPressure)
                            .addComponent(txtBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCity)
                            .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAddress)
                            .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCommunity)
                            .addComponent(txtCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblGender)
                            .addComponent(txtGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(btnUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(lblAbnormalPatientCount, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblName2)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName1)
                            .addComponent(cmbxCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAge1)
                            .addComponent(cmbAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(66, 66, 66)
                        .addComponent(btnApplyFilter)
                        .addGap(31, 31, 31))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtMedicalRecordNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMedicalRecordNoFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMedicalRecordNoFocusLost

    private void txtCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCityActionPerformed

    private void txtCommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCommunityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCommunityActionPerformed

    private void txtBloodPressureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBloodPressureActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBloodPressureActionPerformed

    private void txtAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAgeActionPerformed

    private void tblDisplayPatientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDisplayPatientMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblDisplayPatient.getModel();
        currentSelectedRow = tblDisplayPatient.getSelectedRow();
        
        String name = model.getValueAt(tblDisplayPatient.getSelectedRow(), 0).toString();
        String medicalRecordNo = model.getValueAt(tblDisplayPatient.getSelectedRow(), 1).toString();
        String age = model.getValueAt(tblDisplayPatient.getSelectedRow(), 2).toString();
        String address = model.getValueAt(tblDisplayPatient.getSelectedRow(), 3).toString();
        String city = model.getValueAt(tblDisplayPatient.getSelectedRow(), 4).toString();
        String community = model.getValueAt(tblDisplayPatient.getSelectedRow(), 5).toString();
        String gender = model.getValueAt(tblDisplayPatient.getSelectedRow(), 6).toString();
        String bloodPressure = model.getValueAt(tblDisplayPatient.getSelectedRow(), 7).toString();
        
        txtName.setText(name);
        txtMedicalRecordNo.setText(medicalRecordNo);
        txtAge.setText(age);
        txtAddress.setText(address);
        txtCity.setText(city);
        txtCommunity.setText(community);
        txtGender.setText(gender);
        txtBloodPressure.setText(bloodPressure);
    }//GEN-LAST:event_tblDisplayPatientMouseClicked
private boolean isRange(String range, int age) {
        if (range.equals("Below 18") && age < 18) {
            return true;
        } 
        else if (range.equals("18 to 45") && age >= 18 && age <=45) {
            return true;
        } 
        else if (range.equals("Above 45") && age > 45) {
            return true;
        } 
        else {
            return false;
        }
    }
    private void btnApplyFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyFilterActionPerformed
        // TODO add your handling code here:
        List<Patient> patients =this.patients.getPatients().stream()
                .filter(p -> 
                        p.getCommunity().equals(cmbxCommunity.getSelectedItem().toString()) 
                                && !p.isNormal(p.getAge(), p.getBloodPressure())
                        && isRange(cmbAge.getSelectedItem().toString(), p.getAge())
                )
                .collect(Collectors.toList());
        populatePatientTable(patients);
        int current = tblDisplayPatient.getRowCount();
        lblAbnormalPatientCount.setText(String.valueOf(current));
                      
    }//GEN-LAST:event_btnApplyFilterActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        
        int medicalRecordNo = Integer.parseInt(txtMedicalRecordNo.getText());
        int age = Integer.parseInt(txtAge.getText());
        String address = txtAddress.getText();
        String community = txtCommunity.getText();
        String city = txtCity.getText();
        Integer bloodPressure = Integer.parseInt(txtBloodPressure.getText());
        Patient patient = null;
        for(Patient p: patients.getPatients()) {
            if (p.getMedicalRecordNo() == medicalRecordNo) { 
                patient = p;
            }
        }
        if(patient == null){
            JOptionPane.showMessageDialog(this, "Error in saving");
        } else {
                    patient.setAge(age);
                    patient.setAddress(address);
                    patient.setCommunity(community);
                    patient.setCity(city);
                    patient.setBloodPressure(bloodPressure);
                   // newVitals.setReportedDate(encounter);
                      
            for(VitalSign p: vitalSignsHistory.getVitalSignsHistory()) {
            if (p.getMedicalRecordNo() == medicalRecordNo) {
                p.setAge(age);
                    p.setAddress(address);
                    p.setCommunity(community);
                    p.setCity(city);
                    p.setBloodPressure(bloodPressure);
                 
            }
        }
    }
              
          populatePatientTable(patients.getPatients());
         
    }//GEN-LAST:event_btnUpdateActionPerformed
 
    public void populatePatientTable(List<Patient> patients) {
        DefaultTableModel model = (DefaultTableModel) tblDisplayPatient.getModel();
        model.setRowCount(0);

       for(Patient p: patients) {
            Object[] row = new Object[8];
            row[0] = p;
            row[1] = p.getMedicalRecordNo();
            row[2] = p.getAge();
            row[3] = p.getAddress();
            row[4] = p.getCity();
            row[5] = p.getCommunity();
            row[6] = p.getGender();
            row[7] = p.getBloodPressure();

            model.addRow(row);
        }
    }
    
    private void populateCmbCommunity() {

        ArrayList<String> uniqueCommunity = new ArrayList<String>();

        if (patients.getPatients().size() > 0) {
            for(Patient p: patients.getPatients()) {
                if (!uniqueCommunity.contains(p.getCommunity())) {
                    uniqueCommunity.add(p.getCommunity());
                }
            }
        }
        
        for (int k=0; k < uniqueCommunity.size(); k++) {
            cmbxCommunity.addItem(uniqueCommunity.get(k));
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApplyFilter;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbAge;
    private javax.swing.JComboBox<String> cmbxCommunity;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblAbnormalPatientCount;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblAge1;
    private javax.swing.JLabel lblBloodPressure;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCommunity;
    private javax.swing.JLabel lblCreate;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblMedicalRecordNo;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblName1;
    private javax.swing.JLabel lblName2;
    private javax.swing.JTable tblDisplayPatient;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtBloodPressure;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtCommunity;
    private javax.swing.JTextField txtGender;
    private javax.swing.JTextField txtMedicalRecordNo;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

}
